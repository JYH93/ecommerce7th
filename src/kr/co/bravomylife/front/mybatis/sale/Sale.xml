<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.bravomylife.front.mybatis.sale.Sale">

	<insert id="rateInsert" parameterType="saleDto">
		INSERT INTO TB_RATE
			(SEQ_SLE, SEQ_MBR, COUNT, RATE_STAR, DT_REG, REGISTER, DT_UPT, UPDATER)
		VALUES
			(#{seq_sle}, #{seq_mbr}, 1, #{rate_star}, SYSDATE, #{register}, NULL, NULL)
	</insert>

	<update id="rateUpdate" parameterType="saleDto">
		UPDATE
			TB_RATE
		SET
			RATE_STAR	= #{rate_star}
			, DT_UPT = SYSDATE
			, UPDATE = #{seq_mbr}
		WHERE
			SEQ_MBR		= #{seq_mbr}
			AND SEQ_SLE	= #{seq_sle}
	</update>

	<select id="reviewCheck" parameterType="saleDto" resultType="java.lang.Integer">
		SELECT
			COUNT(SEQ_SLE)
		FROM
			TB_REVIEW
		WHERE
			SEQ_MBR			= #{seq_mbr}
			AND SEQ_SLE		= #{seq_sle}
			AND FLG_DELETE	= 'N'
	</select>

	<select id="rateCheck" parameterType="saleDto" resultType="java.lang.Integer">
		SELECT
			COUNT(SEQ_SLE)
		FROM
			TB_RATE
		WHERE
			SEQ_MBR			= #{seq_mbr}
			AND SEQ_SLE		= #{seq_sle}
	</select>

	<select id="sequence" resultType="java.lang.Integer">
		SELECT SQ_SEQ_REVIEW.NEXTVAL FROM DUAL
	</select>

	<insert id="insertText" parameterType="saleDto">
		INSERT INTO TB_REVIEW
			(SEQ_REVIEW, SEQ_SLE, SEQ_MBR, FLG_DELETE, RATE_REVIEW, DT_REG, REGISTER, DT_UPT, UPDATER)
		VALUES
			(#{seq_review}, #{seq_sle}, #{seq_mbr}, 'N', #{rate_review}, SYSDATE, #{register}, NULL, NULL)
	</insert>

	<insert id="insertReview" parameterType="saleDto">
		INSERT INTO TB_REVIEW
			(SEQ_REVIEW, SEQ_SLE, SEQ_MBR, FLG_DELETE, RATE_REVIEW, DT_REG, REGISTER, DT_UPT, UPDATER)
		VALUES
			(#{seq_review}, #{seq_sle}, #{seq_mbr}, 'N', #{rate_review}, SYSDATE, #{register}, NULL, NULL)
	</insert>
	
	<insert id="insertReviewFile" parameterType="saleFileDto">
		INSERT INTO TB_REVIEW_IMG
			(SEQ_REVIEW, SEQ_SLE, SEQ_MBR, FILE_SAVE, FILE_ORIG)
		VALUES
			(#{seq_review}, #{seq_sle}, #{seq_mbr}, #{file_save}, #{file_orig})
	</insert>

	<insert id="setLikeInsert" parameterType="saleDto">
		INSERT INTO TB_LIKE
			(SEQ_LIKE, SEQ_MBR, SEQ_SLE, FLG_LIKE, DT_REG, REGISTER, DT_UPT, UPDATER)
		VALUES
			(SQ_SEQ_LIKE.NEXTVAL, #{seq_mbr}, #{seq_sle}, #{flg_like}, SYSDATE, #{register}, NULL, NULL)
	</insert>

	<update id="setLikeUpdate" parameterType="saleDto">
		UPDATE
			TB_LIKE
		SET
			FLG_LIKE	= #{flg_like}
			, DT_UPT = SYSDATE
		WHERE
			SEQ_MBR		= #{seq_mbr}
			AND SEQ_SLE	= #{seq_sle}
			AND FLG_LIKE	= 'N'
	</update>

	<select id="setLikeCheck" parameterType="saleDto" resultType="java.lang.Integer">
		SELECT
			COUNT(SEQ_SLE)
		FROM
			TB_LIKE
		WHERE
			SEQ_MBR			= #{seq_mbr}
			AND SEQ_SLE		= #{seq_sle}
	</select>

	<update id="delLike" parameterType="saleDto">
		UPDATE
			TB_LIKE
		SET
			FLG_LIKE		= #{flg_like}
			, DT_UPT = SYSDATE
		WHERE
			SEQ_MBR			= #{seq_mbr}
			AND SEQ_SLE		= #{seq_sle}
			AND FLG_LIKE	= 'Y'
	</update>

	<select id="reviewCounts" parameterType="saleDto" resultType="saleDto">
		SELECT
			COUNT(SEQ_REVIEW) review_count
		FROM
			TB_REVIEW
		WHERE
			SEQ_SLE = #{seq_sle}
	</select>

	<select id="reviewCount" parameterType="pagingDto" resultType="java.lang.Integer">
		SELECT
			COUNT(ROWNUM)
		FROM
			TB_SLE sle
		LEFT JOIN
			TB_REVIEW review
		ON
			sle.SEQ_SLE = review.SEQ_SLE
		WHERE
		<include refid="reviewwhere" />
	</select>

	<select id="reviewList" parameterType="pagingDto" resultType="saleDto">
		SELECT
			*
		FROM
		(
		SELECT
			/*+ first_rows(10) */ ROW_NUMBER() OVER (ORDER BY sle.DT_REG DESC) rnum
			, CASE 
				WHEN rate.COUNT > 0 THEN ROUND(rate.RATE_STAR * 1.0 / rate.COUNT, 0)
				ELSE 0 
			  END AS average_rate
			, review.SEQ_MBR
			, review.FLG_DELETE
			, review.RATE_REVIEW
			, TO_CHAR(review.DT_REG, 'YYYY-MM-DD') dt_reg
			, mbr.MBR_NM
		FROM
			TB_SLE sle
		LEFT JOIN
			TB_RATE rate
		ON
			sle.SEQ_SLE = rate.SEQ_SLE
		LEFT JOIN
			TB_REVIEW review
		ON
			sle.SEQ_SLE = review.SEQ_SLE
		LEFT JOIN
			TB_MBR_MST mbr
		ON
			review.SEQ_MBR = mbr.SEQ_MBR
		WHERE
		<include refid="reviewwhere" />
		)
		<![CDATA[
		WHERE rnum >= (${currentPage} - 1) * ${linePerPage} + 1 AND rnum <= ${currentPage} * ${linePerPage}
		]]>
		ORDER BY rnum
	</select>
	
	<sql id="reviewwhere">
		sle.SEQ_SLE = #{seq_sle}
		AND review.FLG_DELETE = 'N'
	</sql>

	<select id="detailCount" parameterType="pagingDto" resultType="java.lang.Integer">
		SELECT
			COUNT(ROWNUM)
		FROM
			TB_SLE sle
		WHERE
		<include refid="detailwhere" />
	</select>

	<select id="detailList" parameterType="pagingDto" resultType="saleDto">
		SELECT
			*
		FROM
		(
		SELECT
			/*+ first_rows(10) */ ROW_NUMBER() OVER (ORDER BY best.FLG_BEST, sle.DT_REG DESC) rnum
			, sle.SEQ_SLE
			, sle.SLE_NM
			, sle.IMG
			, sle.PRICE_SALE
			, rate.RATE_STAR
			, sle.cd_ctg_b
			, sle.cd_ctg_m
			, rate.COUNT
			, ROUND(rate.RATE_STAR * 1.0 / rate.COUNT, 0) average_rate
			, sle.DISCOUNT
			, sle.PRICE_SALE * (1 - (sle.DISCOUNT / 100)) discount_sale
			, best.FLG_BEST
		FROM
			TB_SLE sle
		LEFT JOIN
			TB_RATE rate
		ON
			sle.SEQ_SLE = rate.SEQ_SLE
		LEFT JOIN
			TB_BEST best
		ON
			sle.SEQ_SLE = best.SEQ_SLE
		WHERE
		<include refid="detailwhere" />
		)
		<![CDATA[
		WHERE rnum <= ${linePerPage}
		]]>
		ORDER BY FLG_BEST, rnum
	</select>

	<sql id="detailwhere">
		sle.CD_STATE_SALE = 2
		AND sle.FLG_DELETE = 'N'
		AND sle.CD_CTG_B = #{cd_ctg_b}
		AND sle.CD_CTG_M = #{cd_ctg_m}
		<![CDATA[
		AND sle.COUNT_STOCK > 0
		]]>
		<![CDATA[
		AND SYSDATE >= sle.DT_SALE_START AND SYSDATE <= sle.DT_SALE_END
		]]>
	</sql>

	<select id="select" parameterType="saleDto" resultType="saleDto">
		SELECT
			sle.SEQ_SLE
			, sle.SLE_NM
			, sle.DESCES
			, NVL(sle.POINT_STACK, 0) POINT_STACK
			, sle.IMG
			, sle.PRICE_SALE
			, sle.PRICE_SALE * (1 - (sle.DISCOUNT / 100)) discount_sale
			, (sle.PRICE_SALE * (1 - (sle.DISCOUNT / 100)) * (sle.POINT_STACK / 100)) POINT_VALUE
			, DECODE(sle.PRD_TYPE, 1, '액상', 2, '정', 3, '캡슐', 4, '베지캡슐', 5, '젤리', 6, '분말', 7, '츄어블', '미정') PRD_TYPE
			, sle.CORP_NM
			, sle.cd_ctg_m
			, sle.cd_ctg_b
			, sle.DISCOUNT
			, TO_CHAR(sle.DT_REG, 'YYYY-MM-DD') AS dt_reg
			, sle.COUNT_STOCK
			, rate_summary.total_count
			, CASE 
				WHEN rate_summary.total_count > 0 THEN rate_summary.total_star_rate / rate_summary.total_count
				ELSE 0
			  END AS average_star_rate
			, best.FLG_BEST
		<if test="seq_mbr != null and seq_mbr != ''">
			, likeTbl.FLG_LIKE
		</if>
		FROM
			TB_SLE sle
		LEFT OUTER JOIN (
			SELECT
				SEQ_SLE,
				SUM(RATE_STAR) AS total_star_rate,
				SUM(COUNT) AS total_count
			FROM
				TB_RATE
			GROUP BY SEQ_SLE
		) rate_summary
		ON
			sle.SEQ_SLE = rate_summary.SEQ_SLE
		LEFT OUTER JOIN
			TB_BEST best
		ON
			sle.SEQ_SLE = best.SEQ_SLE
		<if test="seq_mbr != null and seq_mbr != ''">
			LEFT OUTER JOIN
				TB_LIKE likeTbl
			ON
				sle.SEQ_SLE = likeTbl.SEQ_SLE
				AND likeTbl.SEQ_MBR = #{seq_mbr}
		</if>
		WHERE
			sle.SEQ_SLE = #{seq_sle}
			AND sle.CD_STATE_SALE = 2
	</select>

	<select id="totalCount" parameterType="pagingDto" resultType="java.lang.Integer">
		SELECT
			COUNT(ROWNUM)
		FROM
			TB_SLE sle
		<if test="filter == 'BestP'">
			LEFT JOIN
				TB_BEST best
			ON
				sle.SEQ_SLE = best.SEQ_SLE
		</if>
			WHERE
		<include refid="totalwhere" />
	</select>

	<select id="totalList" parameterType="pagingDto" resultType="saleDto">
		SELECT
			*
		FROM
		(
		SELECT
			/*+ first_rows(10) */ ROW_NUMBER() OVER (ORDER BY best.FLG_BEST, sle.DT_REG DESC) rnum
			, sle.SEQ_SLE
			, sle.SLE_NM
			, sle.IMG
			, sle.PRICE_SALE
			, sle.CD_CTG_B
			, sle.CD_CTG_M
			, rate.RATE_STAR
			, rate.COUNT
			, ROUND(rate.RATE_STAR * 1.0 / rate.COUNT, 0) average_rate
			, sle.PRD_TYPE
			, sle.CORP_NM
			, sle.DISCOUNT
			, sle.COUNT_STOCK
			, sle.PRICE_SALE * (1 - (sle.DISCOUNT / 100)) discount_sale
			, TO_CHAR(sle.DT_REG, 'YYYY-MM-DD') DT_REG
			, best.FLG_BEST
		FROM
			TB_SLE sle
		LEFT JOIN
			TB_RATE rate
		ON
			sle.SEQ_SLE = rate.SEQ_SLE
		LEFT JOIN
			TB_BEST best
		ON
			sle.SEQ_SLE = best.SEQ_SLE
		WHERE
		<include refid="totalwhere" />
		)
		<![CDATA[
		WHERE rnum >= (${currentPage} - 1) * ${linePerPage} + 1 AND rnum <= ${currentPage} * ${linePerPage}
		]]>
		ORDER BY FLG_BEST
		<if test="filter == 'LowP'">
			, DISCOUNT_SALE ASC
		</if>
		<if test="filter == 'HighP'">
			, DISCOUNT_SALE DESC
		</if>
		<if test="filter == 'DtReg'">
			, DT_REG DESC
		</if>
		, rnum
	</select>

	<sql id="totalwhere">
		sle.CD_STATE_SALE = 2
		AND sle.FLG_DELETE = 'N'
		<![CDATA[
		AND sle.COUNT_STOCK > 0
		]]>
		<![CDATA[
		AND SYSDATE >= sle.DT_SALE_START AND SYSDATE <= sle.DT_SALE_END
		]]>
		<if test="corp_nm != null and corp_nm != ''">
			AND sle.CORP_NM = #{corp_nm}
		</if>
		<if test="prd_type != null and prd_type != ''">
			AND sle.PRD_TYPE = #{prd_type}
		</if>
		<if test="filter == 'BestP'">
			AND best.FLG_BEST IS NOT NULL AND best.FLG_BEST = 'Y'
		</if>
	</sql>

	<select id="ingredientCount" parameterType="pagingDto" resultType="java.lang.Integer">
		SELECT
			COUNT(ROWNUM)
		FROM
			TB_SLE sle
		<if test="filter == 'BestP'">
			LEFT JOIN
				TB_BEST best
			ON
				sle.SEQ_SLE = best.SEQ_SLE
		</if>
			WHERE
		<include refid="ingredientwhere" />
	</select>

	<select id="ingredientList" parameterType="pagingDto" resultType="saleDto">
		SELECT
			*
		FROM
		(
		SELECT
			/*+ first_rows(10) */ ROW_NUMBER() OVER (ORDER BY best.FLG_BEST, sle.DT_REG DESC) rnum
			, sle.SEQ_SLE
			, sle.SLE_NM
			, sle.IMG
			, sle.PRICE_SALE
			, sle.CD_CTG_B
			, sle.CD_CTG_M
			, rate.RATE_STAR
			, rate.COUNT
			, ROUND(rate.RATE_STAR * 1.0 / rate.COUNT, 0) average_rate
			, sle.PRD_TYPE
			, sle.CORP_NM
			, sle.DISCOUNT
			, sle.COUNT_STOCK
			, sle.PRICE_SALE * (1 - (sle.DISCOUNT / 100)) discount_sale
			, TO_CHAR(sle.DT_REG, 'YYYY-MM-DD') DT_REG
			, best.FLG_BEST
		FROM
			TB_SLE sle
		LEFT JOIN
			TB_RATE rate
		ON
			sle.SEQ_SLE = rate.SEQ_SLE
		LEFT JOIN
			TB_BEST best
		on
			sle.SEQ_SLE = best.SEQ_SLE
		WHERE
		<include refid="ingredientwhere" />
		)
		<![CDATA[
		WHERE rnum >= (${currentPage} - 1) * ${linePerPage} + 1 AND rnum <= ${currentPage} * ${linePerPage}
		]]>
		ORDER BY FLG_BEST
		<if test="filter == 'LowP'">
			, DISCOUNT_SALE ASC
		</if>
		<if test="filter == 'HighP'">
			, DISCOUNT_SALE DESC
		</if>
		<if test="filter == 'DtReg'">
			, DT_REG DESC
		</if>
		, rnum
	</select>

	<sql id="ingredientwhere">
		sle.CD_STATE_SALE = 2
		AND sle.FLG_DELETE = 'N'
		AND sle.CD_CTG_B = '2'
		<![CDATA[
		AND sle.COUNT_STOCK > 0
		]]>
		<![CDATA[
		AND SYSDATE >= sle.DT_SALE_START AND SYSDATE <= sle.DT_SALE_END
		]]>
		<choose>
			<when test="cd_ctg_m != null and cd_ctg_m != ''">
				AND sle.CD_CTG_M = #{cd_ctg_m}
			</when>
			<otherwise>
				AND sle.CD_CTG_M IN (1, 2, 3, 4, 5, 6, 7, 8, 9)
			</otherwise>
		</choose>
		<if test="corp_nm != null and corp_nm != ''">
			AND sle.CORP_NM = #{corp_nm}
		</if>
		<if test="prd_type != null and prd_type != ''">
			AND sle.PRD_TYPE = #{prd_type}
		</if>
		<if test="filter == 'BestP'">
			AND best.FLG_BEST IS NOT NULL AND best.FLG_BEST = 'Y'
		</if>
	</sql>

	<select id="functionCount" parameterType="pagingDto" resultType="java.lang.Integer">
		SELECT
			COUNT(ROWNUM)
		FROM
			TB_SLE sle
		<if test="filter == 'BestP'">
			LEFT JOIN
				TB_BEST best
			ON
				sle.SEQ_SLE = best.SEQ_SLE
		</if>
			WHERE
		<include refid="functionwhere" />
	</select>

	<select id="functionList" parameterType="pagingDto" resultType="saleDto">
		SELECT
			*
		FROM
		(
		SELECT
			/*+ first_rows(10) */ ROW_NUMBER() OVER (ORDER BY best.FLG_BEST, sle.DT_REG DESC) rnum
			, sle.SEQ_SLE
			, sle.SLE_NM
			, sle.IMG
			, sle.PRICE_SALE
			, sle.CD_CTG_B
			, sle.CD_CTG_M
			, rate.RATE_STAR
			, rate.COUNT
			, ROUND(rate.RATE_STAR * 1.0 / rate.COUNT, 0) average_rate
			, sle.PRD_TYPE
			, sle.CORP_NM
			, sle.DISCOUNT
			, sle.COUNT_STOCK
			, sle.PRICE_SALE * (1 - (sle.DISCOUNT / 100)) discount_sale
			, TO_CHAR(sle.DT_REG, 'YYYY-MM-DD') DT_REG
			, best.FLG_BEST
		FROM
			TB_SLE sle
		LEFT JOIN
			TB_RATE rate
		ON
			sle.SEQ_SLE = rate.SEQ_SLE
		LEFT JOIN
			TB_BEST best
		on
			sle.SEQ_SLE = best.SEQ_SLE
		WHERE
		<include refid="functionwhere" />
		)
		<![CDATA[
		WHERE rnum >= (${currentPage} - 1) * ${linePerPage} + 1 AND rnum <= ${currentPage} * ${linePerPage}
		]]>
		ORDER BY FLG_BEST
		<if test="filter == 'LowP'">
			, DISCOUNT_SALE ASC
		</if>
		<if test="filter == 'HighP'">
			, DISCOUNT_SALE DESC
		</if>
		<if test="filter == 'DtReg'">
			, DT_REG DESC
		</if>
		, rnum
	</select>

	<sql id="functionwhere">
		sle.CD_STATE_SALE = 2
		AND sle.FLG_DELETE = 'N'
		AND sle.CD_CTG_B = '1'
		<![CDATA[
		AND sle.COUNT_STOCK > 0
		]]>
		<![CDATA[
		AND SYSDATE >= sle.DT_SALE_START AND SYSDATE <= sle.DT_SALE_END
		]]>
		<choose>
			<when test="cd_ctg_m != null and cd_ctg_m != ''">
				AND sle.CD_CTG_M = #{cd_ctg_m}
			</when>
			<otherwise>
				AND sle.CD_CTG_M IN (1, 2, 3, 4, 5, 6, 7, 8, 9)
			</otherwise>
		</choose>
		<if test="corp_nm != null and corp_nm != ''">
			AND sle.CORP_NM = #{corp_nm}
		</if>
		<if test="prd_type != null and prd_type != ''">
			AND sle.PRD_TYPE = #{prd_type}
		</if>
		<if test="filter == 'BestP'">
			AND best.FLG_BEST IS NOT NULL AND best.FLG_BEST = 'Y'
		</if>
	</sql>

	<select id="genderCount" parameterType="pagingDto" resultType="java.lang.Integer">
		SELECT
			COUNT(ROWNUM)
		FROM
			TB_SLE sle
		<if test="filter == 'BestP'">
			LEFT JOIN
				TB_BEST best
			ON
				sle.SEQ_SLE = best.SEQ_SLE
		</if>
			WHERE
		<include refid="genderwhere" />
	</select>

	<select id="genderList" parameterType="pagingDto" resultType="saleDto">
		SELECT
			*
		FROM
		(
		SELECT
			/*+ first_rows(10) */ ROW_NUMBER() OVER (ORDER BY best.FLG_BEST, sle.DT_REG DESC) rnum
			, sle.SEQ_SLE
			, sle.SLE_NM
			, sle.IMG
			, sle.PRICE_SALE
			, sle.CD_CTG_B
			, sle.CD_CTG_M
			, rate.RATE_STAR
			, rate.COUNT
			, ROUND(rate.RATE_STAR * 1.0 / rate.COUNT, 0) average_rate
			, sle.PRD_TYPE
			, sle.CORP_NM
			, sle.DISCOUNT
			, sle.COUNT_STOCK
			, sle.PRICE_SALE * (1 - (sle.DISCOUNT / 100)) discount_sale
			, TO_CHAR(sle.DT_REG, 'YYYY-MM-DD') DT_REG
			, best.FLG_BEST
		FROM
			TB_SLE sle
		LEFT JOIN
			TB_RATE rate
		ON
			sle.SEQ_SLE = rate.SEQ_SLE
		LEFT JOIN
			TB_BEST best
		on
			sle.SEQ_SLE = best.SEQ_SLE
		WHERE
		<include refid="genderwhere" />
		)
		<![CDATA[
		WHERE rnum >= (${currentPage} - 1) * ${linePerPage} + 1 AND rnum <= ${currentPage} * ${linePerPage}
		]]>
		ORDER BY FLG_BEST
		<if test="filter == 'LowP'">
			, DISCOUNT_SALE ASC
		</if>
		<if test="filter == 'HighP'">
			, DISCOUNT_SALE DESC
		</if>
		<if test="filter == 'DtReg'">
			, DT_REG DESC
		</if>
		, rnum
	</select>

	<sql id="genderwhere">
		sle.CD_STATE_SALE = 2
		AND sle.FLG_DELETE = 'N'
		AND sle.CD_CTG_B = '3'
		<![CDATA[
		AND sle.COUNT_STOCK > 0
		]]>
		<![CDATA[
		AND SYSDATE >= sle.DT_SALE_START AND SYSDATE <= sle.DT_SALE_END
		]]>
		<choose>
			<when test="cd_ctg_m != null and cd_ctg_m != ''">
				AND sle.CD_CTG_M = #{cd_ctg_m}
			</when>
			<otherwise>
				AND sle.CD_CTG_M IN (1, 2)
			</otherwise>
		</choose>
		<if test="corp_nm != null and corp_nm != ''">
			AND sle.CORP_NM = #{corp_nm}
		</if>
		<if test="prd_type != null and prd_type != ''">
			AND sle.PRD_TYPE = #{prd_type}
		</if>
		<if test="filter == 'BestP'">
			AND best.FLG_BEST IS NOT NULL AND best.FLG_BEST = 'Y'
		</if>
	</sql>
	
	<select id="listingLike" parameterType="pagingDto" resultType="pagingDto">
		SELECT
			sle.SEQ_SLE
			, sle.SLE_NM
			, NVL(sle.POINT_STACK, 0) POINT_STACK
			, sle.IMG
			, sle.PRICE_SALE
			, sle.PRICE_SALE * (1 - (sle.DISCOUNT / 100)) discount_sale
			, sle.CORP_NM
			, rate.COUNT
			, sle.cd_ctg_m
			, sle.cd_ctg_b
			, TO_CHAR(sle.DT_REG, 'YYYY-MM-DD') AS dt_reg
			, sle.COUNT_STOCK
			, likeTbl.FLG_LIKE
		FROM
			TB_SLE sle
		LEFT OUTER JOIN
			TB_RATE rate
		ON
			sle.SEQ_SLE = rate.SEQ_SLE
		LEFT OUTER JOIN
			TB_LIKE likeTbl
		ON
			sle.SEQ_SLE = likeTbl.SEQ_SLE
			AND likeTbl.SEQ_MBR = #{seq_mbr}
		WHERE
			likeTbl.SEQ_MBR = #{seq_mbr}	
			AND sle.CD_STATE_SALE = 2
			AND sle.FLG_DELETE	= 'N'
			AND likeTbl.FLG_LIKE = 'Y'
	</select>
	
	<select id="myLikeCount" parameterType="pagingDto" resultType="java.lang.Integer">
		SELECT
			COUNT(ROWNUM)
		FROM
			TB_SLE sle
		WHERE
		<include refid="myLikewhere" />
	</select>
	
	<sql id="myLikewhere">
		sle.SEQ_SLE = #{seq_sle}
	</sql>

</mapper>